// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KVOperation.proto

#include "KVOperation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace WW {
PROTOBUF_CONSTEXPR Meta::Meta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDefaultTypeInternal() {}
  union {
    Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDefaultTypeInternal _Meta_default_instance_;
PROTOBUF_CONSTEXPR KVOperationRequest::KVOperationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KVOperationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVOperationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVOperationRequestDefaultTypeInternal() {}
  union {
    KVOperationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVOperationRequestDefaultTypeInternal _KVOperationRequest_default_instance_;
PROTOBUF_CONSTEXPR KVOperationResponse::KVOperationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct KVOperationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KVOperationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KVOperationResponseDefaultTypeInternal() {}
  union {
    KVOperationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KVOperationResponseDefaultTypeInternal _KVOperationResponse_default_instance_;
}  // namespace WW
static ::_pb::Metadata file_level_metadata_KVOperation_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KVOperation_2eproto[2];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_KVOperation_2eproto[1];

const uint32_t TableStruct_KVOperation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WW::Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WW::Meta, _impl_.uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationRequest, _impl_.meta_),
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationRequest, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationResponse, _impl_.meta_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::WW::KVOperationResponse, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::WW::Meta)},
  { 7, -1, -1, sizeof(::WW::KVOperationRequest)},
  { 17, -1, -1, sizeof(::WW::KVOperationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::WW::_Meta_default_instance_._instance,
  &::WW::_KVOperationRequest_default_instance_._instance,
  &::WW::_KVOperationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_KVOperation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021KVOperation.proto\022\002WW\"\024\n\004Meta\022\014\n\004uuid\030"
  "\001 \001(\t\"i\n\022KVOperationRequest\022\037\n\004type\030\001 \001("
  "\0162\021.WW.OperationType\022\026\n\004meta\030\002 \001(\0132\010.WW."
  "Meta\022\013\n\003key\030\003 \001(\t\022\r\n\005value\030\004 \001(\t\"\243\002\n\023KVO"
  "perationResponse\0227\n\013status_code\030\001 \001(\0162\"."
  "WW.KVOperationResponse.StatusCode\022\026\n\004met"
  "a\030\002 \001(\0132\010.WW.Meta\022\021\n\007payload\030\003 \001(\tH\000\022\021\n\007"
  "address\030\004 \001(\tH\000\022\020\n\006reason\030\005 \001(\tH\000\"{\n\nSta"
  "tusCode\022\013\n\007DEFAULT\020\000\022\014\n\007SUCCESS\020\310\001\022\014\n\007CR"
  "EATED\020\311\001\022\r\n\010REDIRECT\020\256\002\022\020\n\013BAD_REQUEST\020\220"
  "\003\022\016\n\tNOT_FOUND\020\224\003\022\023\n\016INTERNAL_ERROR\020\364\003B\006"
  "\n\004data*9\n\rOperationType\022\007\n\003PUT\020\000\022\n\n\006UPDA"
  "TE\020\001\022\n\n\006DELETE\020\002\022\007\n\003GET\020\0032P\n\022KVOperation"
  "Service\022:\n\007Execute\022\026.WW.KVOperationReque"
  "st\032\027.WW.KVOperationResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_KVOperation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KVOperation_2eproto = {
    false, false, 600, descriptor_table_protodef_KVOperation_2eproto,
    "KVOperation.proto",
    &descriptor_table_KVOperation_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_KVOperation_2eproto::offsets,
    file_level_metadata_KVOperation_2eproto, file_level_enum_descriptors_KVOperation_2eproto,
    file_level_service_descriptors_KVOperation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KVOperation_2eproto_getter() {
  return &descriptor_table_KVOperation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KVOperation_2eproto(&descriptor_table_KVOperation_2eproto);
namespace WW {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVOperationResponse_StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KVOperation_2eproto);
  return file_level_enum_descriptors_KVOperation_2eproto[0];
}
bool KVOperationResponse_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 200:
    case 201:
    case 302:
    case 400:
    case 404:
    case 500:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr KVOperationResponse_StatusCode KVOperationResponse::DEFAULT;
constexpr KVOperationResponse_StatusCode KVOperationResponse::SUCCESS;
constexpr KVOperationResponse_StatusCode KVOperationResponse::CREATED;
constexpr KVOperationResponse_StatusCode KVOperationResponse::REDIRECT;
constexpr KVOperationResponse_StatusCode KVOperationResponse::BAD_REQUEST;
constexpr KVOperationResponse_StatusCode KVOperationResponse::NOT_FOUND;
constexpr KVOperationResponse_StatusCode KVOperationResponse::INTERNAL_ERROR;
constexpr KVOperationResponse_StatusCode KVOperationResponse::StatusCode_MIN;
constexpr KVOperationResponse_StatusCode KVOperationResponse::StatusCode_MAX;
constexpr int KVOperationResponse::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KVOperation_2eproto);
  return file_level_enum_descriptors_KVOperation_2eproto[1];
}
bool OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Meta::_Internal {
 public:
};

Meta::Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WW.Meta)
}
Meta::Meta(const Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Meta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:WW.Meta)
}

inline void Meta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:WW.Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
}

void Meta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:WW.Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.Meta.uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WW.Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.Meta.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WW.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WW.Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Meta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Meta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Meta::GetClassData() const { return &_class_data_; }


void Meta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Meta*>(&to_msg);
  auto& from = static_cast<const Meta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WW.Meta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WW.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  return true;
}

void Meta::InternalSwap(Meta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVOperation_2eproto_getter, &descriptor_table_KVOperation_2eproto_once,
      file_level_metadata_KVOperation_2eproto[0]);
}

// ===================================================================

class KVOperationRequest::_Internal {
 public:
  static const ::WW::Meta& meta(const KVOperationRequest* msg);
};

const ::WW::Meta&
KVOperationRequest::_Internal::meta(const KVOperationRequest* msg) {
  return *msg->_impl_.meta_;
}
KVOperationRequest::KVOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WW.KVOperationRequest)
}
KVOperationRequest::KVOperationRequest(const KVOperationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVOperationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::WW::Meta(*from._impl_.meta_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:WW.KVOperationRequest)
}

inline void KVOperationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KVOperationRequest::~KVOperationRequest() {
  // @@protoc_insertion_point(destructor:WW.KVOperationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVOperationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.meta_;
}

void KVOperationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVOperationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:WW.KVOperationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVOperationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WW.OperationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::WW::OperationType>(val));
        } else
          goto handle_unusual;
        continue;
      // .WW.Meta meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.KVOperationRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.KVOperationRequest.value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVOperationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WW.KVOperationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .WW.OperationType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .WW.Meta meta = 2;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.KVOperationRequest.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.KVOperationRequest.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WW.KVOperationRequest)
  return target;
}

size_t KVOperationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WW.KVOperationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .WW.Meta meta = 2;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // .WW.OperationType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVOperationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVOperationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVOperationRequest::GetClassData() const { return &_class_data_; }


void KVOperationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVOperationRequest*>(&to_msg);
  auto& from = static_cast<const KVOperationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WW.KVOperationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::WW::Meta::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVOperationRequest::CopyFrom(const KVOperationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WW.KVOperationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVOperationRequest::IsInitialized() const {
  return true;
}

void KVOperationRequest::InternalSwap(KVOperationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVOperationRequest, _impl_.type_)
      + sizeof(KVOperationRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(KVOperationRequest, _impl_.meta_)>(
          reinterpret_cast<char*>(&_impl_.meta_),
          reinterpret_cast<char*>(&other->_impl_.meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KVOperationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVOperation_2eproto_getter, &descriptor_table_KVOperation_2eproto_once,
      file_level_metadata_KVOperation_2eproto[1]);
}

// ===================================================================

class KVOperationResponse::_Internal {
 public:
  static const ::WW::Meta& meta(const KVOperationResponse* msg);
};

const ::WW::Meta&
KVOperationResponse::_Internal::meta(const KVOperationResponse* msg) {
  return *msg->_impl_.meta_;
}
KVOperationResponse::KVOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WW.KVOperationResponse)
}
KVOperationResponse::KVOperationResponse(const KVOperationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KVOperationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.status_code_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::WW::Meta(*from._impl_.meta_);
  }
  _this->_impl_.status_code_ = from._impl_.status_code_;
  clear_has_data();
  switch (from.data_case()) {
    case kPayload: {
      _this->_internal_set_payload(from._internal_payload());
      break;
    }
    case kAddress: {
      _this->_internal_set_address(from._internal_address());
      break;
    }
    case kReason: {
      _this->_internal_set_reason(from._internal_reason());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:WW.KVOperationResponse)
}

inline void KVOperationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.status_code_){0}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

KVOperationResponse::~KVOperationResponse() {
  // @@protoc_insertion_point(destructor:WW.KVOperationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KVOperationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meta_;
  if (has_data()) {
    clear_data();
  }
}

void KVOperationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KVOperationResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:WW.KVOperationResponse)
  switch (data_case()) {
    case kPayload: {
      _impl_.data_.payload_.Destroy();
      break;
    }
    case kAddress: {
      _impl_.data_.address_.Destroy();
      break;
    }
    case kReason: {
      _impl_.data_.reason_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void KVOperationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:WW.KVOperationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  _impl_.status_code_ = 0;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KVOperationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WW.KVOperationResponse.StatusCode status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::WW::KVOperationResponse_StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .WW.Meta meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.KVOperationResponse.payload"));
        } else
          goto handle_unusual;
        continue;
      // string address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.KVOperationResponse.address"));
        } else
          goto handle_unusual;
        continue;
      // string reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WW.KVOperationResponse.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KVOperationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WW.KVOperationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .WW.KVOperationResponse.StatusCode status_code = 1;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status_code(), target);
  }

  // .WW.Meta meta = 2;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // string payload = 3;
  if (_internal_has_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.KVOperationResponse.payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // string address = 4;
  if (_internal_has_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.KVOperationResponse.address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_address(), target);
  }

  // string reason = 5;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WW.KVOperationResponse.reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WW.KVOperationResponse)
  return target;
}

size_t KVOperationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WW.KVOperationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WW.Meta meta = 2;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // .WW.KVOperationResponse.StatusCode status_code = 1;
  if (this->_internal_status_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  switch (data_case()) {
    // string payload = 3;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_payload());
      break;
    }
    // string address = 4;
    case kAddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address());
      break;
    }
    // string reason = 5;
    case kReason: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KVOperationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KVOperationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KVOperationResponse::GetClassData() const { return &_class_data_; }


void KVOperationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KVOperationResponse*>(&to_msg);
  auto& from = static_cast<const KVOperationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WW.KVOperationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::WW::Meta::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  switch (from.data_case()) {
    case kPayload: {
      _this->_internal_set_payload(from._internal_payload());
      break;
    }
    case kAddress: {
      _this->_internal_set_address(from._internal_address());
      break;
    }
    case kReason: {
      _this->_internal_set_reason(from._internal_reason());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KVOperationResponse::CopyFrom(const KVOperationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WW.KVOperationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVOperationResponse::IsInitialized() const {
  return true;
}

void KVOperationResponse::InternalSwap(KVOperationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KVOperationResponse, _impl_.status_code_)
      + sizeof(KVOperationResponse::_impl_.status_code_)
      - PROTOBUF_FIELD_OFFSET(KVOperationResponse, _impl_.meta_)>(
          reinterpret_cast<char*>(&_impl_.meta_),
          reinterpret_cast<char*>(&other->_impl_.meta_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KVOperationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KVOperation_2eproto_getter, &descriptor_table_KVOperation_2eproto_once,
      file_level_metadata_KVOperation_2eproto[2]);
}

// ===================================================================

KVOperationService::~KVOperationService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* KVOperationService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KVOperation_2eproto);
  return file_level_service_descriptors_KVOperation_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* KVOperationService::GetDescriptor() {
  return descriptor();
}

void KVOperationService::Execute(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::WW::KVOperationRequest*,
                         ::WW::KVOperationResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Execute() not implemented.");
  done->Run();
}

void KVOperationService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_KVOperation_2eproto[0]);
  switch(method->index()) {
    case 0:
      Execute(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::WW::KVOperationRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::WW::KVOperationResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& KVOperationService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::WW::KVOperationRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& KVOperationService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::WW::KVOperationResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

KVOperationService_Stub::KVOperationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
KVOperationService_Stub::KVOperationService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
KVOperationService_Stub::~KVOperationService_Stub() {
  if (owns_channel_) delete channel_;
}

void KVOperationService_Stub::Execute(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::WW::KVOperationRequest* request,
                              ::WW::KVOperationResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace WW
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WW::Meta*
Arena::CreateMaybeMessage< ::WW::Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WW::Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::WW::KVOperationRequest*
Arena::CreateMaybeMessage< ::WW::KVOperationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WW::KVOperationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::WW::KVOperationResponse*
Arena::CreateMaybeMessage< ::WW::KVOperationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WW::KVOperationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
