// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftSnapShot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaftSnapShot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaftSnapShot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaftSnapShot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaftSnapShot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaftSnapShot_2eproto;
namespace WW {
class SnapShotData;
struct SnapShotDataDefaultTypeInternal;
extern SnapShotDataDefaultTypeInternal _SnapShotData_default_instance_;
class SnapShotEntry;
struct SnapShotEntryDefaultTypeInternal;
extern SnapShotEntryDefaultTypeInternal _SnapShotEntry_default_instance_;
}  // namespace WW
PROTOBUF_NAMESPACE_OPEN
template<> ::WW::SnapShotData* Arena::CreateMaybeMessage<::WW::SnapShotData>(Arena*);
template<> ::WW::SnapShotEntry* Arena::CreateMaybeMessage<::WW::SnapShotEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WW {

// ===================================================================

class SnapShotEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.SnapShotEntry) */ {
 public:
  inline SnapShotEntry() : SnapShotEntry(nullptr) {}
  ~SnapShotEntry() override;
  explicit PROTOBUF_CONSTEXPR SnapShotEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapShotEntry(const SnapShotEntry& from);
  SnapShotEntry(SnapShotEntry&& from) noexcept
    : SnapShotEntry() {
    *this = ::std::move(from);
  }

  inline SnapShotEntry& operator=(const SnapShotEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapShotEntry& operator=(SnapShotEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapShotEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapShotEntry* internal_default_instance() {
    return reinterpret_cast<const SnapShotEntry*>(
               &_SnapShotEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnapShotEntry& a, SnapShotEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapShotEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapShotEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapShotEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapShotEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapShotEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapShotEntry& from) {
    SnapShotEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapShotEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.SnapShotEntry";
  }
  protected:
  explicit SnapShotEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:WW.SnapShotEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftSnapShot_2eproto;
};
// -------------------------------------------------------------------

class SnapShotData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.SnapShotData) */ {
 public:
  inline SnapShotData() : SnapShotData(nullptr) {}
  ~SnapShotData() override;
  explicit PROTOBUF_CONSTEXPR SnapShotData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SnapShotData(const SnapShotData& from);
  SnapShotData(SnapShotData&& from) noexcept
    : SnapShotData() {
    *this = ::std::move(from);
  }

  inline SnapShotData& operator=(const SnapShotData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnapShotData& operator=(SnapShotData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SnapShotData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SnapShotData* internal_default_instance() {
    return reinterpret_cast<const SnapShotData*>(
               &_SnapShotData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnapShotData& a, SnapShotData& b) {
    a.Swap(&b);
  }
  inline void Swap(SnapShotData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SnapShotData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SnapShotData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SnapShotData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SnapShotData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SnapShotData& from) {
    SnapShotData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapShotData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.SnapShotData";
  }
  protected:
  explicit SnapShotData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvsFieldNumber = 3,
    kLastAppliedLogIndexFieldNumber = 1,
    kLastAppliedLogTermFieldNumber = 2,
  };
  // repeated .WW.SnapShotEntry kvs = 3;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;
  public:
  void clear_kvs();
  ::WW::SnapShotEntry* mutable_kvs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::SnapShotEntry >*
      mutable_kvs();
  private:
  const ::WW::SnapShotEntry& _internal_kvs(int index) const;
  ::WW::SnapShotEntry* _internal_add_kvs();
  public:
  const ::WW::SnapShotEntry& kvs(int index) const;
  ::WW::SnapShotEntry* add_kvs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::SnapShotEntry >&
      kvs() const;

  // int32 last_applied_log_index = 1;
  void clear_last_applied_log_index();
  int32_t last_applied_log_index() const;
  void set_last_applied_log_index(int32_t value);
  private:
  int32_t _internal_last_applied_log_index() const;
  void _internal_set_last_applied_log_index(int32_t value);
  public:

  // int32 last_applied_log_term = 2;
  void clear_last_applied_log_term();
  int32_t last_applied_log_term() const;
  void set_last_applied_log_term(int32_t value);
  private:
  int32_t _internal_last_applied_log_term() const;
  void _internal_set_last_applied_log_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WW.SnapShotData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::SnapShotEntry > kvs_;
    int32_t last_applied_log_index_;
    int32_t last_applied_log_term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftSnapShot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnapShotEntry

// string key = 1;
inline void SnapShotEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SnapShotEntry::key() const {
  // @@protoc_insertion_point(field_get:WW.SnapShotEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapShotEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.SnapShotEntry.key)
}
inline std::string* SnapShotEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:WW.SnapShotEntry.key)
  return _s;
}
inline const std::string& SnapShotEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SnapShotEntry::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SnapShotEntry::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SnapShotEntry::release_key() {
  // @@protoc_insertion_point(field_release:WW.SnapShotEntry.key)
  return _impl_.key_.Release();
}
inline void SnapShotEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.SnapShotEntry.key)
}

// string value = 2;
inline void SnapShotEntry::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& SnapShotEntry::value() const {
  // @@protoc_insertion_point(field_get:WW.SnapShotEntry.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SnapShotEntry::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.SnapShotEntry.value)
}
inline std::string* SnapShotEntry::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:WW.SnapShotEntry.value)
  return _s;
}
inline const std::string& SnapShotEntry::_internal_value() const {
  return _impl_.value_.Get();
}
inline void SnapShotEntry::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* SnapShotEntry::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* SnapShotEntry::release_value() {
  // @@protoc_insertion_point(field_release:WW.SnapShotEntry.value)
  return _impl_.value_.Release();
}
inline void SnapShotEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.SnapShotEntry.value)
}

// -------------------------------------------------------------------

// SnapShotData

// int32 last_applied_log_index = 1;
inline void SnapShotData::clear_last_applied_log_index() {
  _impl_.last_applied_log_index_ = 0;
}
inline int32_t SnapShotData::_internal_last_applied_log_index() const {
  return _impl_.last_applied_log_index_;
}
inline int32_t SnapShotData::last_applied_log_index() const {
  // @@protoc_insertion_point(field_get:WW.SnapShotData.last_applied_log_index)
  return _internal_last_applied_log_index();
}
inline void SnapShotData::_internal_set_last_applied_log_index(int32_t value) {
  
  _impl_.last_applied_log_index_ = value;
}
inline void SnapShotData::set_last_applied_log_index(int32_t value) {
  _internal_set_last_applied_log_index(value);
  // @@protoc_insertion_point(field_set:WW.SnapShotData.last_applied_log_index)
}

// int32 last_applied_log_term = 2;
inline void SnapShotData::clear_last_applied_log_term() {
  _impl_.last_applied_log_term_ = 0;
}
inline int32_t SnapShotData::_internal_last_applied_log_term() const {
  return _impl_.last_applied_log_term_;
}
inline int32_t SnapShotData::last_applied_log_term() const {
  // @@protoc_insertion_point(field_get:WW.SnapShotData.last_applied_log_term)
  return _internal_last_applied_log_term();
}
inline void SnapShotData::_internal_set_last_applied_log_term(int32_t value) {
  
  _impl_.last_applied_log_term_ = value;
}
inline void SnapShotData::set_last_applied_log_term(int32_t value) {
  _internal_set_last_applied_log_term(value);
  // @@protoc_insertion_point(field_set:WW.SnapShotData.last_applied_log_term)
}

// repeated .WW.SnapShotEntry kvs = 3;
inline int SnapShotData::_internal_kvs_size() const {
  return _impl_.kvs_.size();
}
inline int SnapShotData::kvs_size() const {
  return _internal_kvs_size();
}
inline void SnapShotData::clear_kvs() {
  _impl_.kvs_.Clear();
}
inline ::WW::SnapShotEntry* SnapShotData::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:WW.SnapShotData.kvs)
  return _impl_.kvs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::SnapShotEntry >*
SnapShotData::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:WW.SnapShotData.kvs)
  return &_impl_.kvs_;
}
inline const ::WW::SnapShotEntry& SnapShotData::_internal_kvs(int index) const {
  return _impl_.kvs_.Get(index);
}
inline const ::WW::SnapShotEntry& SnapShotData::kvs(int index) const {
  // @@protoc_insertion_point(field_get:WW.SnapShotData.kvs)
  return _internal_kvs(index);
}
inline ::WW::SnapShotEntry* SnapShotData::_internal_add_kvs() {
  return _impl_.kvs_.Add();
}
inline ::WW::SnapShotEntry* SnapShotData::add_kvs() {
  ::WW::SnapShotEntry* _add = _internal_add_kvs();
  // @@protoc_insertion_point(field_add:WW.SnapShotData.kvs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::SnapShotEntry >&
SnapShotData::kvs() const {
  // @@protoc_insertion_point(field_list:WW.SnapShotData.kvs)
  return _impl_.kvs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaftSnapShot_2eproto
