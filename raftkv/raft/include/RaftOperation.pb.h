// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftOperation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaftOperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaftOperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaftOperation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaftOperation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaftOperation_2eproto;
namespace WW {
class RaftOperationRequest;
struct RaftOperationRequestDefaultTypeInternal;
extern RaftOperationRequestDefaultTypeInternal _RaftOperationRequest_default_instance_;
class RaftOperationResponse;
struct RaftOperationResponseDefaultTypeInternal;
extern RaftOperationResponseDefaultTypeInternal _RaftOperationResponse_default_instance_;
}  // namespace WW
PROTOBUF_NAMESPACE_OPEN
template<> ::WW::RaftOperationRequest* Arena::CreateMaybeMessage<::WW::RaftOperationRequest>(Arena*);
template<> ::WW::RaftOperationResponse* Arena::CreateMaybeMessage<::WW::RaftOperationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WW {

enum CommandType : int {
  PUT = 0,
  UPDATE = 1,
  REMOVE = 2,
  GET = 3,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = PUT;
constexpr CommandType CommandType_MAX = GET;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor();
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandType_descriptor(), enum_t_value);
}
inline bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class RaftOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.RaftOperationRequest) */ {
 public:
  inline RaftOperationRequest() : RaftOperationRequest(nullptr) {}
  ~RaftOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR RaftOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftOperationRequest(const RaftOperationRequest& from);
  RaftOperationRequest(RaftOperationRequest&& from) noexcept
    : RaftOperationRequest() {
    *this = ::std::move(from);
  }

  inline RaftOperationRequest& operator=(const RaftOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftOperationRequest& operator=(RaftOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftOperationRequest* internal_default_instance() {
    return reinterpret_cast<const RaftOperationRequest*>(
               &_RaftOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RaftOperationRequest& a, RaftOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftOperationRequest& from) {
    RaftOperationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.RaftOperationRequest";
  }
  protected:
  explicit RaftOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .WW.CommandType type = 1;
  void clear_type();
  ::WW::CommandType type() const;
  void set_type(::WW::CommandType value);
  private:
  ::WW::CommandType _internal_type() const;
  void _internal_set_type(::WW::CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:WW.RaftOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftOperation_2eproto;
};
// -------------------------------------------------------------------

class RaftOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.RaftOperationResponse) */ {
 public:
  inline RaftOperationResponse() : RaftOperationResponse(nullptr) {}
  ~RaftOperationResponse() override;
  explicit PROTOBUF_CONSTEXPR RaftOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RaftOperationResponse(const RaftOperationResponse& from);
  RaftOperationResponse(RaftOperationResponse&& from) noexcept
    : RaftOperationResponse() {
    *this = ::std::move(from);
  }

  inline RaftOperationResponse& operator=(const RaftOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaftOperationResponse& operator=(RaftOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RaftOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RaftOperationResponse* internal_default_instance() {
    return reinterpret_cast<const RaftOperationResponse*>(
               &_RaftOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RaftOperationResponse& a, RaftOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RaftOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaftOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RaftOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RaftOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RaftOperationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RaftOperationResponse& from) {
    RaftOperationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaftOperationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.RaftOperationResponse";
  }
  protected:
  explicit RaftOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kLeaderAddressFieldNumber = 5,
    kSuccessFieldNumber = 1,
    kIsLeaderFieldNumber = 4,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string leader_address = 5;
  void clear_leader_address();
  const std::string& leader_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_leader_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_leader_address();
  PROTOBUF_NODISCARD std::string* release_leader_address();
  void set_allocated_leader_address(std::string* leader_address);
  private:
  const std::string& _internal_leader_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_leader_address(const std::string& value);
  std::string* _internal_mutable_leader_address();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool is_leader = 4;
  void clear_is_leader();
  bool is_leader() const;
  void set_is_leader(bool value);
  private:
  bool _internal_is_leader() const;
  void _internal_set_is_leader(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WW.RaftOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_address_;
    bool success_;
    bool is_leader_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftOperation_2eproto;
};
// ===================================================================

class RaftOperationService_Stub;

class RaftOperationService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftOperationService() {};
 public:
  virtual ~RaftOperationService();

  typedef RaftOperationService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void OperateRaft(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WW::RaftOperationRequest* request,
                       ::WW::RaftOperationResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftOperationService);
};

class RaftOperationService_Stub : public RaftOperationService {
 public:
  RaftOperationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RaftOperationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RaftOperationService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RaftOperationService ------------------------------------------

  void OperateRaft(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WW::RaftOperationRequest* request,
                       ::WW::RaftOperationResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftOperationService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RaftOperationRequest

// .WW.CommandType type = 1;
inline void RaftOperationRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::WW::CommandType RaftOperationRequest::_internal_type() const {
  return static_cast< ::WW::CommandType >(_impl_.type_);
}
inline ::WW::CommandType RaftOperationRequest::type() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationRequest.type)
  return _internal_type();
}
inline void RaftOperationRequest::_internal_set_type(::WW::CommandType value) {
  
  _impl_.type_ = value;
}
inline void RaftOperationRequest::set_type(::WW::CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:WW.RaftOperationRequest.type)
}

// string key = 2;
inline void RaftOperationRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& RaftOperationRequest::key() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftOperationRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.RaftOperationRequest.key)
}
inline std::string* RaftOperationRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:WW.RaftOperationRequest.key)
  return _s;
}
inline const std::string& RaftOperationRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void RaftOperationRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftOperationRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftOperationRequest::release_key() {
  // @@protoc_insertion_point(field_release:WW.RaftOperationRequest.key)
  return _impl_.key_.Release();
}
inline void RaftOperationRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.RaftOperationRequest.key)
}

// string value = 3;
inline void RaftOperationRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& RaftOperationRequest::value() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftOperationRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.RaftOperationRequest.value)
}
inline std::string* RaftOperationRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:WW.RaftOperationRequest.value)
  return _s;
}
inline const std::string& RaftOperationRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void RaftOperationRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftOperationRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftOperationRequest::release_value() {
  // @@protoc_insertion_point(field_release:WW.RaftOperationRequest.value)
  return _impl_.value_.Release();
}
inline void RaftOperationRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.RaftOperationRequest.value)
}

// -------------------------------------------------------------------

// RaftOperationResponse

// bool success = 1;
inline void RaftOperationResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool RaftOperationResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool RaftOperationResponse::success() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationResponse.success)
  return _internal_success();
}
inline void RaftOperationResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void RaftOperationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:WW.RaftOperationResponse.success)
}

// string value = 3;
inline void RaftOperationResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& RaftOperationResponse::value() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftOperationResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.RaftOperationResponse.value)
}
inline std::string* RaftOperationResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:WW.RaftOperationResponse.value)
  return _s;
}
inline const std::string& RaftOperationResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void RaftOperationResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftOperationResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftOperationResponse::release_value() {
  // @@protoc_insertion_point(field_release:WW.RaftOperationResponse.value)
  return _impl_.value_.Release();
}
inline void RaftOperationResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.RaftOperationResponse.value)
}

// bool is_leader = 4;
inline void RaftOperationResponse::clear_is_leader() {
  _impl_.is_leader_ = false;
}
inline bool RaftOperationResponse::_internal_is_leader() const {
  return _impl_.is_leader_;
}
inline bool RaftOperationResponse::is_leader() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationResponse.is_leader)
  return _internal_is_leader();
}
inline void RaftOperationResponse::_internal_set_is_leader(bool value) {
  
  _impl_.is_leader_ = value;
}
inline void RaftOperationResponse::set_is_leader(bool value) {
  _internal_set_is_leader(value);
  // @@protoc_insertion_point(field_set:WW.RaftOperationResponse.is_leader)
}

// string leader_address = 5;
inline void RaftOperationResponse::clear_leader_address() {
  _impl_.leader_address_.ClearToEmpty();
}
inline const std::string& RaftOperationResponse::leader_address() const {
  // @@protoc_insertion_point(field_get:WW.RaftOperationResponse.leader_address)
  return _internal_leader_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RaftOperationResponse::set_leader_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.leader_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.RaftOperationResponse.leader_address)
}
inline std::string* RaftOperationResponse::mutable_leader_address() {
  std::string* _s = _internal_mutable_leader_address();
  // @@protoc_insertion_point(field_mutable:WW.RaftOperationResponse.leader_address)
  return _s;
}
inline const std::string& RaftOperationResponse::_internal_leader_address() const {
  return _impl_.leader_address_.Get();
}
inline void RaftOperationResponse::_internal_set_leader_address(const std::string& value) {
  
  _impl_.leader_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RaftOperationResponse::_internal_mutable_leader_address() {
  
  return _impl_.leader_address_.Mutable(GetArenaForAllocation());
}
inline std::string* RaftOperationResponse::release_leader_address() {
  // @@protoc_insertion_point(field_release:WW.RaftOperationResponse.leader_address)
  return _impl_.leader_address_.Release();
}
inline void RaftOperationResponse::set_allocated_leader_address(std::string* leader_address) {
  if (leader_address != nullptr) {
    
  } else {
    
  }
  _impl_.leader_address_.SetAllocated(leader_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.leader_address_.IsDefault()) {
    _impl_.leader_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.RaftOperationResponse.leader_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WW::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WW::CommandType>() {
  return ::WW::CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaftOperation_2eproto
