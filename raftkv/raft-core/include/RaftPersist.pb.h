// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftPersist.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RaftPersist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RaftPersist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RaftPersist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RaftPersist_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RaftPersist_2eproto;
namespace WW {
class PersistData;
struct PersistDataDefaultTypeInternal;
extern PersistDataDefaultTypeInternal _PersistData_default_instance_;
class PersistLogEntry;
struct PersistLogEntryDefaultTypeInternal;
extern PersistLogEntryDefaultTypeInternal _PersistLogEntry_default_instance_;
}  // namespace WW
PROTOBUF_NAMESPACE_OPEN
template<> ::WW::PersistData* Arena::CreateMaybeMessage<::WW::PersistData>(Arena*);
template<> ::WW::PersistLogEntry* Arena::CreateMaybeMessage<::WW::PersistLogEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WW {

// ===================================================================

class PersistLogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.PersistLogEntry) */ {
 public:
  inline PersistLogEntry() : PersistLogEntry(nullptr) {}
  ~PersistLogEntry() override;
  explicit PROTOBUF_CONSTEXPR PersistLogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersistLogEntry(const PersistLogEntry& from);
  PersistLogEntry(PersistLogEntry&& from) noexcept
    : PersistLogEntry() {
    *this = ::std::move(from);
  }

  inline PersistLogEntry& operator=(const PersistLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistLogEntry& operator=(PersistLogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersistLogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersistLogEntry* internal_default_instance() {
    return reinterpret_cast<const PersistLogEntry*>(
               &_PersistLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersistLogEntry& a, PersistLogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistLogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistLogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersistLogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersistLogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersistLogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersistLogEntry& from) {
    PersistLogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistLogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.PersistLogEntry";
  }
  protected:
  explicit PersistLogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kTermFieldNumber = 2,
  };
  // bytes command = 3;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 term = 2;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WW.PersistLogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    int32_t term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftPersist_2eproto;
};
// -------------------------------------------------------------------

class PersistData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.PersistData) */ {
 public:
  inline PersistData() : PersistData(nullptr) {}
  ~PersistData() override;
  explicit PROTOBUF_CONSTEXPR PersistData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersistData(const PersistData& from);
  PersistData(PersistData&& from) noexcept
    : PersistData() {
    *this = ::std::move(from);
  }

  inline PersistData& operator=(const PersistData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistData& operator=(PersistData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersistData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersistData* internal_default_instance() {
    return reinterpret_cast<const PersistData*>(
               &_PersistData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PersistData& a, PersistData& b) {
    a.Swap(&b);
  }
  inline void Swap(PersistData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersistData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersistData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersistData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersistData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersistData& from) {
    PersistData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.PersistData";
  }
  protected:
  explicit PersistData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kTermFieldNumber = 1,
    kVotedForFieldNumber = 2,
    kSnapshotIndexFieldNumber = 4,
    kSnapshotTermFieldNumber = 5,
  };
  // repeated .WW.PersistLogEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::WW::PersistLogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::PersistLogEntry >*
      mutable_entries();
  private:
  const ::WW::PersistLogEntry& _internal_entries(int index) const;
  ::WW::PersistLogEntry* _internal_add_entries();
  public:
  const ::WW::PersistLogEntry& entries(int index) const;
  ::WW::PersistLogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::PersistLogEntry >&
      entries() const;

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 voted_for = 2;
  void clear_voted_for();
  int32_t voted_for() const;
  void set_voted_for(int32_t value);
  private:
  int32_t _internal_voted_for() const;
  void _internal_set_voted_for(int32_t value);
  public:

  // int32 snapshot_index = 4;
  void clear_snapshot_index();
  int32_t snapshot_index() const;
  void set_snapshot_index(int32_t value);
  private:
  int32_t _internal_snapshot_index() const;
  void _internal_set_snapshot_index(int32_t value);
  public:

  // int32 snapshot_term = 5;
  void clear_snapshot_term();
  int32_t snapshot_term() const;
  void set_snapshot_term(int32_t value);
  private:
  int32_t _internal_snapshot_term() const;
  void _internal_set_snapshot_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WW.PersistData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::PersistLogEntry > entries_;
    int32_t term_;
    int32_t voted_for_;
    int32_t snapshot_index_;
    int32_t snapshot_term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RaftPersist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersistLogEntry

// int32 term = 2;
inline void PersistLogEntry::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t PersistLogEntry::_internal_term() const {
  return _impl_.term_;
}
inline int32_t PersistLogEntry::term() const {
  // @@protoc_insertion_point(field_get:WW.PersistLogEntry.term)
  return _internal_term();
}
inline void PersistLogEntry::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void PersistLogEntry::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:WW.PersistLogEntry.term)
}

// bytes command = 3;
inline void PersistLogEntry::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& PersistLogEntry::command() const {
  // @@protoc_insertion_point(field_get:WW.PersistLogEntry.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PersistLogEntry::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.PersistLogEntry.command)
}
inline std::string* PersistLogEntry::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:WW.PersistLogEntry.command)
  return _s;
}
inline const std::string& PersistLogEntry::_internal_command() const {
  return _impl_.command_.Get();
}
inline void PersistLogEntry::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* PersistLogEntry::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* PersistLogEntry::release_command() {
  // @@protoc_insertion_point(field_release:WW.PersistLogEntry.command)
  return _impl_.command_.Release();
}
inline void PersistLogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.PersistLogEntry.command)
}

// -------------------------------------------------------------------

// PersistData

// int32 term = 1;
inline void PersistData::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t PersistData::_internal_term() const {
  return _impl_.term_;
}
inline int32_t PersistData::term() const {
  // @@protoc_insertion_point(field_get:WW.PersistData.term)
  return _internal_term();
}
inline void PersistData::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void PersistData::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:WW.PersistData.term)
}

// int32 voted_for = 2;
inline void PersistData::clear_voted_for() {
  _impl_.voted_for_ = 0;
}
inline int32_t PersistData::_internal_voted_for() const {
  return _impl_.voted_for_;
}
inline int32_t PersistData::voted_for() const {
  // @@protoc_insertion_point(field_get:WW.PersistData.voted_for)
  return _internal_voted_for();
}
inline void PersistData::_internal_set_voted_for(int32_t value) {
  
  _impl_.voted_for_ = value;
}
inline void PersistData::set_voted_for(int32_t value) {
  _internal_set_voted_for(value);
  // @@protoc_insertion_point(field_set:WW.PersistData.voted_for)
}

// repeated .WW.PersistLogEntry entries = 3;
inline int PersistData::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int PersistData::entries_size() const {
  return _internal_entries_size();
}
inline void PersistData::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::WW::PersistLogEntry* PersistData::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:WW.PersistData.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::PersistLogEntry >*
PersistData::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:WW.PersistData.entries)
  return &_impl_.entries_;
}
inline const ::WW::PersistLogEntry& PersistData::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::WW::PersistLogEntry& PersistData::entries(int index) const {
  // @@protoc_insertion_point(field_get:WW.PersistData.entries)
  return _internal_entries(index);
}
inline ::WW::PersistLogEntry* PersistData::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::WW::PersistLogEntry* PersistData::add_entries() {
  ::WW::PersistLogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:WW.PersistData.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::WW::PersistLogEntry >&
PersistData::entries() const {
  // @@protoc_insertion_point(field_list:WW.PersistData.entries)
  return _impl_.entries_;
}

// int32 snapshot_index = 4;
inline void PersistData::clear_snapshot_index() {
  _impl_.snapshot_index_ = 0;
}
inline int32_t PersistData::_internal_snapshot_index() const {
  return _impl_.snapshot_index_;
}
inline int32_t PersistData::snapshot_index() const {
  // @@protoc_insertion_point(field_get:WW.PersistData.snapshot_index)
  return _internal_snapshot_index();
}
inline void PersistData::_internal_set_snapshot_index(int32_t value) {
  
  _impl_.snapshot_index_ = value;
}
inline void PersistData::set_snapshot_index(int32_t value) {
  _internal_set_snapshot_index(value);
  // @@protoc_insertion_point(field_set:WW.PersistData.snapshot_index)
}

// int32 snapshot_term = 5;
inline void PersistData::clear_snapshot_term() {
  _impl_.snapshot_term_ = 0;
}
inline int32_t PersistData::_internal_snapshot_term() const {
  return _impl_.snapshot_term_;
}
inline int32_t PersistData::snapshot_term() const {
  // @@protoc_insertion_point(field_get:WW.PersistData.snapshot_term)
  return _internal_snapshot_term();
}
inline void PersistData::_internal_set_snapshot_term(int32_t value) {
  
  _impl_.snapshot_term_ = value;
}
inline void PersistData::set_snapshot_term(int32_t value) {
  _internal_set_snapshot_term(value);
  // @@protoc_insertion_point(field_set:WW.PersistData.snapshot_term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WW

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RaftPersist_2eproto
