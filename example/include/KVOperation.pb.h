// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KVOperation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KVOperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KVOperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KVOperation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KVOperation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KVOperation_2eproto;
namespace WW {
class KVOperationRequest;
struct KVOperationRequestDefaultTypeInternal;
extern KVOperationRequestDefaultTypeInternal _KVOperationRequest_default_instance_;
class KVOperationResponse;
struct KVOperationResponseDefaultTypeInternal;
extern KVOperationResponseDefaultTypeInternal _KVOperationResponse_default_instance_;
class Meta;
struct MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
}  // namespace WW
PROTOBUF_NAMESPACE_OPEN
template<> ::WW::KVOperationRequest* Arena::CreateMaybeMessage<::WW::KVOperationRequest>(Arena*);
template<> ::WW::KVOperationResponse* Arena::CreateMaybeMessage<::WW::KVOperationResponse>(Arena*);
template<> ::WW::Meta* Arena::CreateMaybeMessage<::WW::Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WW {

enum KVOperationResponse_StatusCode : int {
  KVOperationResponse_StatusCode_DEFAULT = 0,
  KVOperationResponse_StatusCode_SUCCESS = 200,
  KVOperationResponse_StatusCode_CREATED = 201,
  KVOperationResponse_StatusCode_REDIRECT = 302,
  KVOperationResponse_StatusCode_BAD_REQUEST = 400,
  KVOperationResponse_StatusCode_NOT_FOUND = 404,
  KVOperationResponse_StatusCode_INTERNAL_ERROR = 500,
  KVOperationResponse_StatusCode_KVOperationResponse_StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  KVOperationResponse_StatusCode_KVOperationResponse_StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool KVOperationResponse_StatusCode_IsValid(int value);
constexpr KVOperationResponse_StatusCode KVOperationResponse_StatusCode_StatusCode_MIN = KVOperationResponse_StatusCode_DEFAULT;
constexpr KVOperationResponse_StatusCode KVOperationResponse_StatusCode_StatusCode_MAX = KVOperationResponse_StatusCode_INTERNAL_ERROR;
constexpr int KVOperationResponse_StatusCode_StatusCode_ARRAYSIZE = KVOperationResponse_StatusCode_StatusCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVOperationResponse_StatusCode_descriptor();
template<typename T>
inline const std::string& KVOperationResponse_StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KVOperationResponse_StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KVOperationResponse_StatusCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KVOperationResponse_StatusCode_descriptor(), enum_t_value);
}
inline bool KVOperationResponse_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KVOperationResponse_StatusCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KVOperationResponse_StatusCode>(
    KVOperationResponse_StatusCode_descriptor(), name, value);
}
enum OperationType : int {
  PUT = 0,
  UPDATE = 1,
  DELETE = 2,
  GET = 3,
  OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OperationType_IsValid(int value);
constexpr OperationType OperationType_MIN = PUT;
constexpr OperationType OperationType_MAX = GET;
constexpr int OperationType_ARRAYSIZE = OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationType_descriptor();
template<typename T>
inline const std::string& OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationType_descriptor(), enum_t_value);
}
inline bool OperationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationType>(
    OperationType_descriptor(), name, value);
}
// ===================================================================

class Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.Meta) */ {
 public:
  inline Meta() : Meta(nullptr) {}
  ~Meta() override;
  explicit PROTOBUF_CONSTEXPR Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Meta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Meta& from) {
    Meta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.Meta";
  }
  protected:
  explicit Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:WW.Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KVOperation_2eproto;
};
// -------------------------------------------------------------------

class KVOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.KVOperationRequest) */ {
 public:
  inline KVOperationRequest() : KVOperationRequest(nullptr) {}
  ~KVOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR KVOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVOperationRequest(const KVOperationRequest& from);
  KVOperationRequest(KVOperationRequest&& from) noexcept
    : KVOperationRequest() {
    *this = ::std::move(from);
  }

  inline KVOperationRequest& operator=(const KVOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVOperationRequest& operator=(KVOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVOperationRequest* internal_default_instance() {
    return reinterpret_cast<const KVOperationRequest*>(
               &_KVOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KVOperationRequest& a, KVOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVOperationRequest& from) {
    KVOperationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.KVOperationRequest";
  }
  protected:
  explicit KVOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kMetaFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .WW.Meta meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::WW::Meta& meta() const;
  PROTOBUF_NODISCARD ::WW::Meta* release_meta();
  ::WW::Meta* mutable_meta();
  void set_allocated_meta(::WW::Meta* meta);
  private:
  const ::WW::Meta& _internal_meta() const;
  ::WW::Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::WW::Meta* meta);
  ::WW::Meta* unsafe_arena_release_meta();

  // .WW.OperationType type = 1;
  void clear_type();
  ::WW::OperationType type() const;
  void set_type(::WW::OperationType value);
  private:
  ::WW::OperationType _internal_type() const;
  void _internal_set_type(::WW::OperationType value);
  public:

  // @@protoc_insertion_point(class_scope:WW.KVOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::WW::Meta* meta_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KVOperation_2eproto;
};
// -------------------------------------------------------------------

class KVOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WW.KVOperationResponse) */ {
 public:
  inline KVOperationResponse() : KVOperationResponse(nullptr) {}
  ~KVOperationResponse() override;
  explicit PROTOBUF_CONSTEXPR KVOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVOperationResponse(const KVOperationResponse& from);
  KVOperationResponse(KVOperationResponse&& from) noexcept
    : KVOperationResponse() {
    *this = ::std::move(from);
  }

  inline KVOperationResponse& operator=(const KVOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVOperationResponse& operator=(KVOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kPayload = 3,
    kAddress = 4,
    kReason = 5,
    DATA_NOT_SET = 0,
  };

  static inline const KVOperationResponse* internal_default_instance() {
    return reinterpret_cast<const KVOperationResponse*>(
               &_KVOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KVOperationResponse& a, KVOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KVOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KVOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KVOperationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KVOperationResponse& from) {
    KVOperationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVOperationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WW.KVOperationResponse";
  }
  protected:
  explicit KVOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KVOperationResponse_StatusCode StatusCode;
  static constexpr StatusCode DEFAULT =
    KVOperationResponse_StatusCode_DEFAULT;
  static constexpr StatusCode SUCCESS =
    KVOperationResponse_StatusCode_SUCCESS;
  static constexpr StatusCode CREATED =
    KVOperationResponse_StatusCode_CREATED;
  static constexpr StatusCode REDIRECT =
    KVOperationResponse_StatusCode_REDIRECT;
  static constexpr StatusCode BAD_REQUEST =
    KVOperationResponse_StatusCode_BAD_REQUEST;
  static constexpr StatusCode NOT_FOUND =
    KVOperationResponse_StatusCode_NOT_FOUND;
  static constexpr StatusCode INTERNAL_ERROR =
    KVOperationResponse_StatusCode_INTERNAL_ERROR;
  static inline bool StatusCode_IsValid(int value) {
    return KVOperationResponse_StatusCode_IsValid(value);
  }
  static constexpr StatusCode StatusCode_MIN =
    KVOperationResponse_StatusCode_StatusCode_MIN;
  static constexpr StatusCode StatusCode_MAX =
    KVOperationResponse_StatusCode_StatusCode_MAX;
  static constexpr int StatusCode_ARRAYSIZE =
    KVOperationResponse_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusCode_descriptor() {
    return KVOperationResponse_StatusCode_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusCode_Name.");
    return KVOperationResponse_StatusCode_Name(enum_t_value);
  }
  static inline bool StatusCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StatusCode* value) {
    return KVOperationResponse_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kPayloadFieldNumber = 3,
    kAddressFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // .WW.Meta meta = 2;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::WW::Meta& meta() const;
  PROTOBUF_NODISCARD ::WW::Meta* release_meta();
  ::WW::Meta* mutable_meta();
  void set_allocated_meta(::WW::Meta* meta);
  private:
  const ::WW::Meta& _internal_meta() const;
  ::WW::Meta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::WW::Meta* meta);
  ::WW::Meta* unsafe_arena_release_meta();

  // .WW.KVOperationResponse.StatusCode status_code = 1;
  void clear_status_code();
  ::WW::KVOperationResponse_StatusCode status_code() const;
  void set_status_code(::WW::KVOperationResponse_StatusCode value);
  private:
  ::WW::KVOperationResponse_StatusCode _internal_status_code() const;
  void _internal_set_status_code(::WW::KVOperationResponse_StatusCode value);
  public:

  // string payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string address = 4;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string reason = 5;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:WW.KVOperationResponse)
 private:
  class _Internal;
  void set_has_payload();
  void set_has_address();
  void set_has_reason();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::WW::Meta* meta_;
    int status_code_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KVOperation_2eproto;
};
// ===================================================================

class KVOperationService_Stub;

class KVOperationService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline KVOperationService() {};
 public:
  virtual ~KVOperationService();

  typedef KVOperationService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Execute(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WW::KVOperationRequest* request,
                       ::WW::KVOperationResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVOperationService);
};

class KVOperationService_Stub : public KVOperationService {
 public:
  KVOperationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  KVOperationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~KVOperationService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements KVOperationService ------------------------------------------

  void Execute(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::WW::KVOperationRequest* request,
                       ::WW::KVOperationResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(KVOperationService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Meta

// string uuid = 1;
inline void Meta::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& Meta::uuid() const {
  // @@protoc_insertion_point(field_get:WW.Meta.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Meta::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.Meta.uuid)
}
inline std::string* Meta::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:WW.Meta.uuid)
  return _s;
}
inline const std::string& Meta::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void Meta::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Meta::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* Meta::release_uuid() {
  // @@protoc_insertion_point(field_release:WW.Meta.uuid)
  return _impl_.uuid_.Release();
}
inline void Meta::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.Meta.uuid)
}

// -------------------------------------------------------------------

// KVOperationRequest

// .WW.OperationType type = 1;
inline void KVOperationRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::WW::OperationType KVOperationRequest::_internal_type() const {
  return static_cast< ::WW::OperationType >(_impl_.type_);
}
inline ::WW::OperationType KVOperationRequest::type() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationRequest.type)
  return _internal_type();
}
inline void KVOperationRequest::_internal_set_type(::WW::OperationType value) {
  
  _impl_.type_ = value;
}
inline void KVOperationRequest::set_type(::WW::OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:WW.KVOperationRequest.type)
}

// .WW.Meta meta = 2;
inline bool KVOperationRequest::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool KVOperationRequest::has_meta() const {
  return _internal_has_meta();
}
inline void KVOperationRequest::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::WW::Meta& KVOperationRequest::_internal_meta() const {
  const ::WW::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::WW::Meta&>(
      ::WW::_Meta_default_instance_);
}
inline const ::WW::Meta& KVOperationRequest::meta() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationRequest.meta)
  return _internal_meta();
}
inline void KVOperationRequest::unsafe_arena_set_allocated_meta(
    ::WW::Meta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WW.KVOperationRequest.meta)
}
inline ::WW::Meta* KVOperationRequest::release_meta() {
  
  ::WW::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WW::Meta* KVOperationRequest::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:WW.KVOperationRequest.meta)
  
  ::WW::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::WW::Meta* KVOperationRequest::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::WW::Meta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::WW::Meta* KVOperationRequest::mutable_meta() {
  ::WW::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationRequest.meta)
  return _msg;
}
inline void KVOperationRequest::set_allocated_meta(::WW::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationRequest.meta)
}

// string key = 3;
inline void KVOperationRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KVOperationRequest::key() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVOperationRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.KVOperationRequest.key)
}
inline std::string* KVOperationRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationRequest.key)
  return _s;
}
inline const std::string& KVOperationRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KVOperationRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KVOperationRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KVOperationRequest::release_key() {
  // @@protoc_insertion_point(field_release:WW.KVOperationRequest.key)
  return _impl_.key_.Release();
}
inline void KVOperationRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationRequest.key)
}

// string value = 4;
inline void KVOperationRequest::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KVOperationRequest::value() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVOperationRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.KVOperationRequest.value)
}
inline std::string* KVOperationRequest::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationRequest.value)
  return _s;
}
inline const std::string& KVOperationRequest::_internal_value() const {
  return _impl_.value_.Get();
}
inline void KVOperationRequest::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* KVOperationRequest::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* KVOperationRequest::release_value() {
  // @@protoc_insertion_point(field_release:WW.KVOperationRequest.value)
  return _impl_.value_.Release();
}
inline void KVOperationRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationRequest.value)
}

// -------------------------------------------------------------------

// KVOperationResponse

// .WW.KVOperationResponse.StatusCode status_code = 1;
inline void KVOperationResponse::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline ::WW::KVOperationResponse_StatusCode KVOperationResponse::_internal_status_code() const {
  return static_cast< ::WW::KVOperationResponse_StatusCode >(_impl_.status_code_);
}
inline ::WW::KVOperationResponse_StatusCode KVOperationResponse::status_code() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationResponse.status_code)
  return _internal_status_code();
}
inline void KVOperationResponse::_internal_set_status_code(::WW::KVOperationResponse_StatusCode value) {
  
  _impl_.status_code_ = value;
}
inline void KVOperationResponse::set_status_code(::WW::KVOperationResponse_StatusCode value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:WW.KVOperationResponse.status_code)
}

// .WW.Meta meta = 2;
inline bool KVOperationResponse::_internal_has_meta() const {
  return this != internal_default_instance() && _impl_.meta_ != nullptr;
}
inline bool KVOperationResponse::has_meta() const {
  return _internal_has_meta();
}
inline void KVOperationResponse::clear_meta() {
  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
}
inline const ::WW::Meta& KVOperationResponse::_internal_meta() const {
  const ::WW::Meta* p = _impl_.meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::WW::Meta&>(
      ::WW::_Meta_default_instance_);
}
inline const ::WW::Meta& KVOperationResponse::meta() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationResponse.meta)
  return _internal_meta();
}
inline void KVOperationResponse::unsafe_arena_set_allocated_meta(
    ::WW::Meta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meta_);
  }
  _impl_.meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WW.KVOperationResponse.meta)
}
inline ::WW::Meta* KVOperationResponse::release_meta() {
  
  ::WW::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WW::Meta* KVOperationResponse::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:WW.KVOperationResponse.meta)
  
  ::WW::Meta* temp = _impl_.meta_;
  _impl_.meta_ = nullptr;
  return temp;
}
inline ::WW::Meta* KVOperationResponse::_internal_mutable_meta() {
  
  if (_impl_.meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::WW::Meta>(GetArenaForAllocation());
    _impl_.meta_ = p;
  }
  return _impl_.meta_;
}
inline ::WW::Meta* KVOperationResponse::mutable_meta() {
  ::WW::Meta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationResponse.meta)
  return _msg;
}
inline void KVOperationResponse::set_allocated_meta(::WW::Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(meta);
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationResponse.meta)
}

// string payload = 3;
inline bool KVOperationResponse::_internal_has_payload() const {
  return data_case() == kPayload;
}
inline bool KVOperationResponse::has_payload() const {
  return _internal_has_payload();
}
inline void KVOperationResponse::set_has_payload() {
  _impl_._oneof_case_[0] = kPayload;
}
inline void KVOperationResponse::clear_payload() {
  if (_internal_has_payload()) {
    _impl_.data_.payload_.Destroy();
    clear_has_data();
  }
}
inline const std::string& KVOperationResponse::payload() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationResponse.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline void KVOperationResponse::set_payload(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    _impl_.data_.payload_.InitDefault();
  }
  _impl_.data_.payload_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.KVOperationResponse.payload)
}
inline std::string* KVOperationResponse::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationResponse.payload)
  return _s;
}
inline const std::string& KVOperationResponse::_internal_payload() const {
  if (_internal_has_payload()) {
    return _impl_.data_.payload_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KVOperationResponse::_internal_set_payload(const std::string& value) {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    _impl_.data_.payload_.InitDefault();
  }
  _impl_.data_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* KVOperationResponse::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    _impl_.data_.payload_.InitDefault();
  }
  return _impl_.data_.payload_.Mutable(      GetArenaForAllocation());
}
inline std::string* KVOperationResponse::release_payload() {
  // @@protoc_insertion_point(field_release:WW.KVOperationResponse.payload)
  if (_internal_has_payload()) {
    clear_has_data();
    return _impl_.data_.payload_.Release();
  } else {
    return nullptr;
  }
}
inline void KVOperationResponse::set_allocated_payload(std::string* payload) {
  if (has_data()) {
    clear_data();
  }
  if (payload != nullptr) {
    set_has_payload();
    _impl_.data_.payload_.InitAllocated(payload, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationResponse.payload)
}

// string address = 4;
inline bool KVOperationResponse::_internal_has_address() const {
  return data_case() == kAddress;
}
inline bool KVOperationResponse::has_address() const {
  return _internal_has_address();
}
inline void KVOperationResponse::set_has_address() {
  _impl_._oneof_case_[0] = kAddress;
}
inline void KVOperationResponse::clear_address() {
  if (_internal_has_address()) {
    _impl_.data_.address_.Destroy();
    clear_has_data();
  }
}
inline const std::string& KVOperationResponse::address() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationResponse.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline void KVOperationResponse::set_address(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_address()) {
    clear_data();
    set_has_address();
    _impl_.data_.address_.InitDefault();
  }
  _impl_.data_.address_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.KVOperationResponse.address)
}
inline std::string* KVOperationResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationResponse.address)
  return _s;
}
inline const std::string& KVOperationResponse::_internal_address() const {
  if (_internal_has_address()) {
    return _impl_.data_.address_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KVOperationResponse::_internal_set_address(const std::string& value) {
  if (!_internal_has_address()) {
    clear_data();
    set_has_address();
    _impl_.data_.address_.InitDefault();
  }
  _impl_.data_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* KVOperationResponse::_internal_mutable_address() {
  if (!_internal_has_address()) {
    clear_data();
    set_has_address();
    _impl_.data_.address_.InitDefault();
  }
  return _impl_.data_.address_.Mutable(      GetArenaForAllocation());
}
inline std::string* KVOperationResponse::release_address() {
  // @@protoc_insertion_point(field_release:WW.KVOperationResponse.address)
  if (_internal_has_address()) {
    clear_has_data();
    return _impl_.data_.address_.Release();
  } else {
    return nullptr;
  }
}
inline void KVOperationResponse::set_allocated_address(std::string* address) {
  if (has_data()) {
    clear_data();
  }
  if (address != nullptr) {
    set_has_address();
    _impl_.data_.address_.InitAllocated(address, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationResponse.address)
}

// string reason = 5;
inline bool KVOperationResponse::_internal_has_reason() const {
  return data_case() == kReason;
}
inline bool KVOperationResponse::has_reason() const {
  return _internal_has_reason();
}
inline void KVOperationResponse::set_has_reason() {
  _impl_._oneof_case_[0] = kReason;
}
inline void KVOperationResponse::clear_reason() {
  if (_internal_has_reason()) {
    _impl_.data_.reason_.Destroy();
    clear_has_data();
  }
}
inline const std::string& KVOperationResponse::reason() const {
  // @@protoc_insertion_point(field_get:WW.KVOperationResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline void KVOperationResponse::set_reason(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_reason()) {
    clear_data();
    set_has_reason();
    _impl_.data_.reason_.InitDefault();
  }
  _impl_.data_.reason_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WW.KVOperationResponse.reason)
}
inline std::string* KVOperationResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:WW.KVOperationResponse.reason)
  return _s;
}
inline const std::string& KVOperationResponse::_internal_reason() const {
  if (_internal_has_reason()) {
    return _impl_.data_.reason_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KVOperationResponse::_internal_set_reason(const std::string& value) {
  if (!_internal_has_reason()) {
    clear_data();
    set_has_reason();
    _impl_.data_.reason_.InitDefault();
  }
  _impl_.data_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* KVOperationResponse::_internal_mutable_reason() {
  if (!_internal_has_reason()) {
    clear_data();
    set_has_reason();
    _impl_.data_.reason_.InitDefault();
  }
  return _impl_.data_.reason_.Mutable(      GetArenaForAllocation());
}
inline std::string* KVOperationResponse::release_reason() {
  // @@protoc_insertion_point(field_release:WW.KVOperationResponse.reason)
  if (_internal_has_reason()) {
    clear_has_data();
    return _impl_.data_.reason_.Release();
  } else {
    return nullptr;
  }
}
inline void KVOperationResponse::set_allocated_reason(std::string* reason) {
  if (has_data()) {
    clear_data();
  }
  if (reason != nullptr) {
    set_has_reason();
    _impl_.data_.reason_.InitAllocated(reason, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:WW.KVOperationResponse.reason)
}

inline bool KVOperationResponse::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void KVOperationResponse::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline KVOperationResponse::DataCase KVOperationResponse::data_case() const {
  return KVOperationResponse::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WW

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WW::KVOperationResponse_StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WW::KVOperationResponse_StatusCode>() {
  return ::WW::KVOperationResponse_StatusCode_descriptor();
}
template <> struct is_proto_enum< ::WW::OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WW::OperationType>() {
  return ::WW::OperationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KVOperation_2eproto
